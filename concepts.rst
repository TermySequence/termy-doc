.. Copyright Â© 2018 TermySequence LLC
.. SPDX-License-Identifier: CC-BY-SA-4.0

Concepts
========

See also :doc:`qtermy concepts <concepts-qt>`.

.. glossary::

   buffer identifier
      A one-byte number which identifies a buffer within a terminal. XTerm-style terminals have two buffers: a primary scrollback buffer (numbered 0), and an "alternate screen buffer" (numbered 1) with no scrollback. Full-screen text mode programs such as :program:`vim` use the alternate screen buffer to avoid overwriting scrollback contents.

   client identifier
      A UUID generated by a TermySequence client to uniquely identify itself. This appears in the :ref:`protocol handshake <protocol-handshake>`, in :termy:protocol:`ANNOUNCE_CLIENT` messages, and elsewhere in the :doc:`TermySequence protocol <protocol>`. The method of generation is unspecified; version 4 (random) identifiers are acceptable.

   character position
      A logical character position within a row of terminal text. Each logical character may include multiple Unicode code points and may be single width or double width. The terminal's :ref:`encoding <protocol-unicode>` determines the width of characters and how they combine.

      :termy:protocol:`CURSOR_MOVED` state updates include both the x position and character position of the cursor. Double-width characters may cause these two values to differ. Also included in cursor state updates is the cursor *sub-position*, which is the number of combining characters received at the current position.

   connection
      A command directly executed by a server in order to establish a connection to another server. This is one method of performing :term:`connection chaining`, the other being a connection through a terminal.

      For the most part, connections are treated as terminals by the :doc:`TermySequence protocol <protocol>`. Terminal identifiers and connection identifiers are grouped together by some messages such as :termy:protocol:`REQUEST_DISCONNECT`. :program:`qtermy` follows this convention, displaying connections as "terminals" with fixed screen content.

   connection chaining
      A signature feature of the :doc:`TermySequence protocol <protocol>`, connection chaining refers to the ability of each server to establish protocol connections to additional servers through its own terminals. From the perspective of the user, these "chained" servers and their terminals can be interacted with just as though they were directly connected. Traffic to and from each server is routed through intermediary servers as necessary, using each server's :term:`unique identifier <server identifier>` as its address.

      A chained connection can be made using any intermediary program that results in an instance of :program:`termy-server` being run on another machine, as another user, or in a container. For example, :manpage:`ssh(1)`, :manpage:`sudo(8)`, and :manpage:`su(1)` can all be used for this purpose (:program:`termy-server` ships with :doc:`wrappers <man/ssh>` for these particular programs). To see connection chaining in action, try running :program:`sudo -i termy-server` from a terminal in :doc:`qtermy <client-qt>`.

      In addition to connecting through terminals, :program:`termy-server` can also execute intermediary programs directly. This is referred to in the protocol as a :term:`connection`. Besides not using up a terminal, this makes it possible to use a faster 8-bit :ref:`encoding <protocol-encoding>`. The :doc:`termy-connect <man/connect>` utility can be used to open a new connection in this manner.

   connection identifier
      See :term:`terminal identifier`.

   content identifier
      An 8-byte unsigned number which identifies an inline content item. These are created by :doc:`termy-download <man/download>`, :doc:`termy-imgcat <man/download>`, and :doc:`termy-imgls <man/download>` and reported to clients as :term:`regions <region>` with the Image :ref:`region type <protocol-regiontype>`. The content identifier is included in the region's attributes. It is used to download the content item via an :termy:protocol:`IMAGE_CONTENT` request or :termy:protocol:`DOWNLOAD_IMAGE` task.

   region identifier
      A 4-byte unsigned number which identifies a :term:`region`. The number zero is an invalid identifier. The server generates identifiers for regions that it manages, such as :term:`job` and :term:`annotation` regions.

   server identifier
      A UUID generated by a TermySequence server to uniquely identify itself. This appears in the :ref:`protocol handshake <protocol-handshake>`, in :termy:protocol:`CLIENT_ANNOUNCE` messages, and elsewhere in the :doc:`TermySequence protocol <protocol>`.

      To construct its identifier, :program:`termy-server` must be provided with a unique machine ID for the local system. By default, :program:`termy-server` attempts to determine this value using a platform-specific source such as :file:`/etc/machine-id`. It's possible to explicitly set the local machine ID using a script. Refer to :doc:`termy-server <man/server>` for more information.

      The local machine ID is combined with the server's UID and standalone mode to produce the final identifier used by the server. This ensures that servers run as different users and in different modes of operation (:term:`transient <transient local server>` and :term:`persistent <persistent user server>`) have different identifiers.

      If :program:`termy-server` cannot determine the local machine ID at all, it will randomly generate an identifier. This is undesirable because it's impossible for clients to track :doc:`server settings <settings/server>` for such a server.

   server name
      The ``name`` server attribute is intended to convey a second name string to supplement the server's hostname. The attribute monitor distributed with :program:`termy-server` sets the server name to one of the server's IP addresses using a heuristic. Depending on the system, the attribute monitor may also report IP address changes as they occur (on Linux, :manpage:`netlink(7)` is used for this purpose).

      The server name may be customized to any desired value using a script. Refer to :doc:`termy-monitor <man/monitor>` for more information.

   server translations
      The server has a small number of human-readable strings that can be translated. Translation files are text files stored at :file:`prefix/share/termy-server/i18n` and named after their respective locale, for example :file:`fr.txt`. Each line of the text file must contain a string identifier and translation separated by an equals (=) character with no spaces. See `here <https://github.com/TermySequence/termysequence/blob/master/util/en_US.txt>`_ for an example.

      Note that in addition to the server's system locale, each terminal has its own independent :termy:profile:`Language <Emulator/Language>` setting that controls the translation of server strings printed to the terminal.

   task
      An exchange of messages between a client and server within the :doc:`TermySequence protocol <protocol>`. Tasks are used to upload and download files, execute commands, forward ports, and more.

      A task is initiated by a client, which assigns a :term:`task identifier` to the task. Some tasks may prompt the user for information using :termy:protocol:`question <TASK_QUESTION>` and :termy:protocol:`answer <TASK_ANSWER>` messages. The task then proceeds to an exchange of :termy:protocol:`input <TASK_INPUT>` and :termy:protocol:`output <TASK_OUTPUT>` messages structured according to the rules of the specific task type. Tasks can be :termy:protocol:`canceled <CANCEL_TASK>` and can time out or fail with an error. Tasks might cause :termy:protocol:`throttle <THROTTLE_PAUSE>` messages to be sent to the client if too much output data is buffered at an intermediate server. Tasks will be automatically canceled if the client disconnects before the task is complete.

   task identifier
      A UUID that uniquely identifies a :term:`task` within the :doc:`TermySequence protocol <protocol>`.

      It is the responsibility of clients to generate these identifiers for tasks that they create. Version 4 (random) identifiers are recommended.

   terminal identifier
      A UUID that uniquely identifies a terminal or :term:`connection` within the :doc:`TermySequence protocol <protocol>`.

      It is the responsibility of clients to generate these identifiers for terminals that they :termy:protocol:`create <CREATE_TERM>`. Version 4 (random) identifiers are recommended.

      Connection identifiers are randomly generated by the server.
