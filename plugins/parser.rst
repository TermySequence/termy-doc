.. Copyright Â© 2018 TermySequence LLC
.. SPDX-License-Identifier: CC-BY-SA-4.0

Semantic Parser
===============

A Semantic Parser is a :doc:`plugin <index>` feature that creates :term:`semantic regions <semantic region>` within the output of matching :term:`jobs <job>`. Only terminals with :doc:`shell integration <../shell-integration>` enabled can make use of semantic parsers. It is also necessary for scrollback :termy:global:`fetch <Server/ScrollbackFetchSpeed>` to be enabled for semantic parsers to work.

The semantic regions created by parsers may specify:

   * An icon and tooltip to be displayed when hovering over the region with the mouse pointer.
   * A URL associated with the region. If it is a ``file://`` URL, it will become the selected file in the :doc:`Files tool <../tools/files>` when the region is clicked.
   * Texts that will be used in drag-and-drop operations when the region is dragged with the mouse.
   * A primary :doc:`action <../actions>` string. By default, this will be invoked when the region is double-clicked although this can be changed via :doc:`global settings <../settings/global>`.
   * A customized context menu containing additional action entries. Menu entries may specify a confirmation prompt which will be displayed to the user before invoking the entry. In the case of a semantic region representing a file, the predefined context menu used in the :doc:`Files tool <../tools/files>` can replace or serve as a parent menu for the region's context menu.

Two variants of semantic parser are supported:

   * A *standard parser* waits until the entire output of the :term:`job` is available and the command's exit status is known. The parser's :js:func:`start <parser.start>` method is called and may use the exit status to decide whether to proceed with output parsing.
   * A *fast parser* :js:func:`processes <parser.process>` each line of output immediately without waiting for the job to finish. The parser's :js:func:`start <parser.start>` method is not called. This is a good choice for long-running commands such as :program:`make`.

:ref:`Smart hyperlinks <smart-hyperlinks>` are an alternative method of creating semantic regions that does not rely on the plugin system, shell integration, nor on the parsing of command output.

The file :file:`parser.mjs.example` distributed with :program:`qtermy` implements a sample semantic parser and is annotated with explanatory comments. Here are some tips for developing a new semantic parser:

   * After reloading the parser plugin from the :doc:`Manage Plugins window <../dialogs/manage-plugins>`, run a new command to test it. Jobs that have already finished will not be re-parsed.
   * A job that scrolls off the top of the scrollback buffer will not be parsed. The entire job must be within the scrollback buffer and all of its output must have been downloaded by :program:`qtermy`. Increase the scrollback :termy:profile:`size <Emulator/ScrollbackSizePower>` if necessary.
   * It may be helpful to bind the :termy:action:`HighlightSemanticRegions` action to a key in the :doc:`keymap <../settings/keymap>`. This will make it possible to view the regions generated by the semantic parser without moving the mouse pointer around.
   * A semantic region's text can be selected by Shift-clicking it, although this can be changed via :doc:`global settings <../settings/global>`.

.. contents::
   :local:

Control Flow
------------

The entry point to a semantic parser is the match function passed to :js:func:`plugin.registerSemanticParser` which is called once for each :term:`job`:

.. js:function:: match_function(context, cmdline, cmddir)

   :param object context: Contains :ref:`methods <parser-match-context>` used to query for information about the job.
   :param string cmdline: The job's command, which is a non-empty string with leading and trailing whitespace removed.
   :param string cmddir: The job's directory as reported by :doc:`shell integration <../shell-integration>`.
   :returns: An object, or ``null`` to skip the job.

The match function must examine its arguments and decide whether to parse the output of the job. If not, the match function must return ``null``. Otherwise, the match function must return an object which defines additional callback methods, described below. The returned object may also contain arbitrary private fields for the parser's own use. For protection against future API changes, name private fields starting with an underscore (_) character. The match function may use the :ref:`methods <parser-match-context>` of the provided match context object to query for various information about the job.

The object returned from the match function must define the following callback methods:

.. js:function:: parser.start(context, exitcode, nrows)

   Called once to begin output processing, unless the parser is a fast parser in which case this method is not called.

   :param object context: Reserved for future use.
   :param integer exitcode: The exit status of the job as reported by :doc:`shell integration <../shell-integration>`.
   :param integer nrows: The total size of the output in terminal rows. Note that there may be fewer output *lines* since a single line might wrap across multiple rows.
   :returns: ``true`` to proceed with output processing, ``false`` to skip the job.

.. js:function:: parser.process(context, text, startRow, endRow)

   Called once for each line of output in the job. Note that a newline character printed at the end of the output (before the next prompt) is considered an empty line.

   :param object context: Contains :ref:`methods <parser-process-context>` used to create regions.
   :param string text: The text of the line without a trailing newline.
   :param integer startRow: The row number on which the line starts.
   :param integer endRow: The row number on which the line ends.
   :returns: ``true`` to continue processing, ``false`` to stop processing and skip the :js:func:`finish <parser.finish>` method.

.. js:function:: parser.finish(context, nrows)

   Called once at the end of output processing.

   :param object context: Contains :ref:`methods <parser-process-context>` used to create regions.
   :param integer nrows: Same as that passed to the :js:func:`start <parser.start>` method.

.. _parser-match-context:

Match Context
-------------

.. js:function:: matchContext.getJobId()

   Returns the region ID of the incoming :term:`job`.

.. js:function:: matchContext.getJobAttribute(name)

   Returns the value of the named job :term:`attribute`, or ``undefined`` if it doesn't exist.

.. js:function:: matchContext.getTerminalId()

   Returns the UUID of the job's terminal.

.. js:function:: matchContext.getTerminalAttribute(name)

   Returns the value of the named terminal :term:`attribute`, or ``undefined`` if it doesn't exist.

.. js:function:: matchContext.getServerId()

   Returns the UUID of the job's server.

.. js:function:: matchContext.getServerAttribute(name)

   Returns the value of the named server :term:`attribute`, or ``undefined`` if it doesn't exist.

.. _parser-process-context:

Process Context
---------------

.. js:function:: processContext.createRegion(startCol, endCol[, regionParams])

   Creates a semantic region in the current output line using the given :ref:`region parameters <parser-region-params>`. This can only be called from the :js:func:`process <parser.process>` method.

   :param integer startCol: The starting offset of the region within the line.
   :param integer endCol: The ending offset of the region within the line.
   :param object regionParams: An optional object containing :ref:`region parameters <parser-region-params>` as fields.
   :returns: The region ID of the new semantic region.

.. js:function:: processContext.createRegionAt(startRow, startCol, endRow, endCol[, regionParams])

   Creates a semantic region with the given bounds, using the given :ref:`region parameters <parser-region-params>`.

   :param integer startRow: The starting row number of the region.
   :param integer startCol: The starting offset of the region within the starting line.
   :param integer endRow: The ending row number of the region.
   :param integer endCol: The ending offset of the region within the ending line.
   :param object regionParams: An optional object containing :ref:`region parameters <parser-region-params>` as fields.
   :returns: The region ID of the new semantic region.

.. js:function:: processContext.nextRegionId()

   Returns the region ID of the region that will be created by the next call to :js:func:`createRegion <processContext.createRegion>` or :js:func:`createRegionAt <processContext.createRegionAt>`. This is for the case where the region ID is needed by the region's own :ref:`parameters <parser-region-params>`.

.. _parser-region-params:

Region Parameters
-----------------

All fields are optional.

.. js:attribute:: regionParams.icon

   The name of the region's icon. An SVG file with the specified name will be loaded from :file:`{$HOME}/.local/share/qtermy/images/semantic` and :file:`{prefix}/share/qtermy/images/semantic` in that order. If no such file is found, the name "default" is used which normally results in an empty icon.

.. js:attribute:: regionParams.tooltip

   The region's tooltip text.

.. js:attribute:: regionParams.uri

   A URL associated with the region.

.. js:attribute:: regionParams.action1

   The region's primary :doc:`action <../actions>` string.

.. js:attribute:: regionParams.drag

   The region's drag-and-drop data. This is a dictionary object whose keys are MIME types and whose values are the associated data. Only textual data is supported.

.. js:attribute:: regionParams.menu

   The region's menu. This is a list of menu entries. Each menu entry is itself a list of between 1 and 5 values, with the first value specifying the type of menu entry:

      * 0: A separator.
      * 1: An ordinary menu item. The next 4 values in the entry are:

         * The :doc:`action <../actions>` string to invoke
         * The menu item's text
         * The menu item's icon, which names an icon in the configured :termy:global:`IconTheme <Global/IconTheme>`.
         * The menu item's tooltip

      * 2: Attaches a confirmation prompt to the menu item immediately preceding this entry. The next value in the entry is the prompt to display.
      * 5: Specifies that the region's menu should inherit from the predefined context menu used in the :doc:`Files tool <../tools/files>`. If used, this must be the first entry in the menu. The second value in the entry is the ``file://`` URL of the region's file. The third value is an optional submenu name. Any further menu entries will be added to a submenu of the file context menu with this name.

.. _smart-hyperlinks:

Smart Hyperlinks
----------------

A *smart hyperlink* is a :term:`semantic region` defined by a terminal program itself using the OSC 515 escape sequence implemented by :doc:`termy-server <../server>`.

Unlike other semantic regions, smart hyperlinks are defined on the server side by programs running within the terminal, rather than on the client side by :program:`qtermy` or its plugins. Because semantic regions can specify arbitrary :doc:`action <../actions>` strings to invoke when double-clicked, this presents a potential security risk. The :termy:global:`AllowSmartHyperlinks <Inline/AllowSmartHyperlinks>` global setting and :termy:server:`AllowSmartHyperlinks <Server/AllowSmartHyperlinks>` server setting can be used to disable smart hyperlinks globally or on a per-server basis.

The OSC 515 escape sequence is identical to the `OSC 8 sequence <https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda>`_ supported by several terminal emulators, including TermySequence. Simply use "515" instead of "8" in both the opening and closing sequences and specify one or more of the following parameters in the opening sequence.

Refer to :ref:`parser-region-params` for more information on these parameters. The URI region parameter is specified directly in the URL portion of the escape sequence, not as a parameter. This `example script <https://github.com/TermySequence/termysequence/blob/master/test/osc515.sh>`_ shows how to use :program:`bash`, :program:`perl`, and :program:`base64` to generate a smart hyperlink. Try running the example script in :program:`qtermy`!

   icon
      The Base64-encoded icon name.

   tooltip
      The Base64-encoded tooltip.

   action1
      The Base64-encoded :doc:`action <../actions>` string.

   drag
      The drag-and-drop data. Join the list of alternating keys and values with NUL characters and then Base64-encode the result.

   menu
      The menu specification. Pad all menu entries out to five values by appending empty strings as necessary. Then join all the menu entry lists together using NUL characters between each value. Finally, Base64-encode the result.
