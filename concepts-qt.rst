.. Copyright Â© 2018 TermySequence LLC
.. SPDX-License-Identifier: CC-BY-SA-4.0

Concepts
========

See also :doc:`server concepts <concepts>`.

.. glossary::

   active server
      In each application window, the :doc:`server <settings/server>` associated with the :term:`active terminal`. The active server normally tracks the active terminal, although it can be directly changed using the :termy:action:`NextServer` and :termy:action:`PreviousServer` actions.

   active terminal
      In each application window, the terminal shown in the :term:`active viewport`. It is the terminal which currently has input focus or which last received input focus. The active terminal is the default target for many :doc:`actions <actions>` that take a :termy:param:`TerminalId` parameter.

   active task
      A task that is expected to finish in a finite time, such as a :termy:action:`DownloadFile` task. The progress of the most recently started active task is shown in the status bar where the home page link is normally displayed. When the :doc:`Tasks tool <tools/tasks>` :termy:global:`autoraises <Tasks/AutoRaiseTasks>` itself, it will not autohide until all active tasks have finished. Tasks that are not active are referred to as "long-running" and generally will not finish until they are explicitly :termy:action:`canceled <CancelTask>`. See :doc:`tools/tasks`.

   active tool
      See :doc:`tools/index`.

   active viewport
      In each application window, the split window pane which currently has input focus or which last received input focus. The terminal displayed in the active viewport is the :term:`active terminal`. In the case where an application window is not split into multiple panes, the active viewport is simply the window's sole viewport. When the application window has focus, the terminal within the active viewport will be resized to fit the viewport if it is :termy:action:`owned <TakeTerminalOwnership>` by the client. Otherwise, the size of the viewport and the size of the terminal screen may differ.

   annotation
      A :term:`region` defined by the user to note a point of interest in the terminal scrollback. Annotation regions are created using the :doc:`Create Annotation dialog <dialogs/create-annotation>`, which can be shown from various context menus and by certain :doc:`actions <actions>` such as :termy:action:`AnnotateSelection`. Annotations are managed from the :doc:`Annotations tool <tools/annotations>` and are shown within the terminal viewport, :ref:`Marks <marks-widget>` and :ref:`Minimap <minimap-widget>` widgets in :ref:`prominent colors <theme-editor-extended>`.

      An annotation carries several predefined :term:`attributes <attribute>`, including user-defined descriptive text and the username of its creator. Annotation regions are stored by :doc:`termy-server <server>` and are visible to all connected clients, not just the creating client.

   attribute
      A UTF-8 key/value pair attached to a :doc:`server <settings/server>`, terminal, or :term:`region`. These are tracked by :doc:`termy-server <../server>` and visible to all connected clients. Attributes are an integral part of the :doc:`TermySequence protocol <protocol>` and are used for many purposes. Server and terminal attributes can be directly examined using the :doc:`View Information window <dialogs/view-information>`.

   current job
      The first :term:`job` from the bottom of the viewport which is either running or finished. In the common case (viewport at bottom of terminal, prompt shown in terminal or foreground job active), the current job is the most recent command that was run.

   default launcher
      The :doc:`launcher <settings/launcher>` which is currently marked as the global default in the :doc:`Manage Launchers window <dialogs/manage-launchers>`. This may or may not be the launcher with the name "Default." It is used by the :termy:action:`OpenFile` action in the absence of a specified :termy:param:`LauncherName` parameter. The default launcher is saved in the :doc:`State settings <settings/state>`.

   emoji
      In terminals with the :termy:profile:`UseEmoji <Encoding/UseEmoji>` profile setting enabled, :program:`qtermy` displays emoji as SVG images loaded from :file:`{$HOME}/.local/share/qtermy/images/emoji` and :file:`{prefix}/share/qtermy/images/emoji` in that order. Image filenames are generated by printing the code points that make up the emoji character in lower-case hexadecimal with multiple code points joined by dashes. An emoji selector (U+FE0F) immediately following the first code point is omitted from the name.

      :program:`qtermy` also treats code points in the private-use range U+F5000 to U+F50FF as emoji. You can define custom emoji by setting image files for these code points (for example, :file:`f5000.svg`) and then using the corresponding code points in the terminal.

   global default profile
      The :doc:`profile <settings/profile>` which is currently marked as the global default in the :doc:`Manage Profiles window <dialogs/manage-profiles>`. This may or may not be the profile with the name "Default." Each :doc:`server <settings/server>` has its own :termy:server:`default profile <Server/DefaultProfile>`, which may or may not defer to the global default. Default profiles are used by the :termy:action:`NewTerminal` action in the absence of a specified :termy:param:`ProfileName` parameter. The default profile is saved in the :doc:`State settings <settings/state>`.

   input multiplexing
      A feature of :program:`qtermy` whereby input sent to a particular terminal designated as the input multiplexing leader is copied to all terminals which are designated as input multiplexing followers. This feature can be used to run commands in multiple terminals at once.

   job
      A :term:`region` which encompasses a shell prompt, the command typed at the prompt, and the output printed by the command. Job regions and prompt, command, and output sub-regions are reported by :doc:`termy-server <server>`, but only if :doc:`shell integration <shell-integration>` is installed. In addition to demarcating jobs with the terminal, job regions also carry :term:`attributes <attribute>` which report the start time, duration, and exit status code of the associated commands. Job regions are used to populate the :doc:`History tool <tools/history>` and :doc:`Suggestions tool <tools/suggestions>` and are shown within the :ref:`Marks <marks-widget>` and :ref:`Minimap <minimap-widget>` widgets. Each viewport has a :term:`selected job` whose prompt is highlighted, and the :termy:action:`ScrollPromptPrevious` and :termy:action:`ScrollPromptNext` actions can be used to move directly from prompt to prompt. Actions such as :termy:action:`CopyJob`, :termy:action:`SelectOutput`, and :termy:action:`WriteCommand` can be used to copy, select, write, and :term:`annotate <annotation>` the text of jobs, commands, and output regions.

   local server
      An instance of :doc:`termy-server <server>` which is running on the same machine and as the same user as :program:`qtermy`. This is the server used to create local terminals and to run local tasks. It is either the :term:`transient local server` or :term:`persistent user server`, depending on which of the two servers are connected and the value of the :termy:global:`PreferTransient <Server/PreferTransient>` global setting. All servers other than the transient local server and persistent user server are considered "remote" servers, even if they are running on the same machine.

   persistent user server
      The :term:`local server` which is not part of the current desktop or login session and which will keep running after the user logs out. Terminals on the persistent user server and the commands run within them are thus long lived and not subject to loss upon logout. This is the traditional use case for terminal emulator multiplexers such as :manpage:`tmux(1)` and :manpage:`screen(1)`.

      .. important:: Because the persistent user server is not run within a desktop or login session, session-specific environment variables such as :envvar:`DISPLAY`, :envvar:`XAUTHORITY`, and :envvar:`XDG_SESSION_ID` will not be set within its terminals. This means that graphical applications and session management commands such as :manpage:`loginctl(1)` cannot be run from the persistent user server's terminals. Run these commands from the :term:`transient local server` instead.

      On a machine that employs `systemd-logind <https://www.freedesktop.org/software/systemd/man/systemd-logind.service.html>`_ to manage user login sessions, some account-specific setup is necessary to make the persistent user server actually persist. Refer to :doc:`systemd`.

   region
      A region of text within the terminal scrollback defined by starting and ending line and column positions, to which one or more :term:`attributes <attribute>` is attached. Regions are used for a variety of purposes, including :term:`jobs <job>`, :term:`annotations <annotation>`, inline images, and semantic content such as hyperlinks. Each region has a unique identifier consisting of an unsigned integer number. Some regions are managed by :doc:`termy-server <server>`, including the :term:`job regions <job>` created by :doc:`shell integration <shell-integration>`. Other regions referred to as :term:`semantic regions <semantic region>` are created and managed privately by :program:`qtermy`.

   selected job
      The :term:`job` within a terminal viewport that has been selected from the :doc:`History tool <tools/history>`, by clicking on a :ref:`mark <marks-widget>` or :ref:`minimap <minimap-widget>` item, or by calling an :doc:`action <actions>` that navigates to or operates on a :ref:`specified job <job-lookup>`. The prompt associated with this job is the :term:`selected prompt`.

      The selected job must be entirely contained within the terminal scrollback; if it scrolls off the top of the scrollback, the associated :term:`region` will be removed by the server.

   selected prompt
      The prompt associated with the :term:`selected job`. It will be displayed in :ref:`prominent colors <theme-editor-extended>`.

   semantic region
      A :term:`region` which attaches an icon, :doc:`action <actions>`, context menu, and other fields to text within the terminal viewport. Semantic regions are used to implement hyperlinks as well as arbitrary semantic content created by :doc:`semantic parsers <plugins/parser>` and :ref:`smart hyperlinks <smart-hyperlinks>`. Some :doc:`actions <actions>` such as :termy:action:`CopySemantic`, :termy:action:`ScrollSemantic`, and :termy:action:`HighlightSemanticRegions` operate only on semantic regions.

   stylesheet
      `Qt Style Sheets <http://doc.qt.io/qt-5/stylesheet.html>`_ can be used to customize the appearance of :program:`qtermy`. The following color properties on the MainWindow class can be `redefined <http://doc.qt.io/qt-5/stylesheet-syntax.html#setting-qobject-properties>`_:

      * minorBg: Background color for messages of minor importance
      * minorFg: Foreground color for messages of minor importance
      * majorBg: Background color for messages of major importance
      * majorFg: Foreground color for messages of major importance
      * startFg: Status color for :doc:`tasks <tools/tasks>` that have been started
      * errorFg: Status color for :doc:`tasks <tools/tasks>` that finished unsuccessfully
      * finishFg: Status color for :doc:`tasks <tools/tasks>` that finished successfully
      * cancelFg: Status color for :doc:`tasks <tools/tasks>` that were canceled
      * connFg: Status color for connected or active items
      * disconnFg: Status color for disconnected or inactive items
      * bellFg: Flash animation color for bell in the :doc:`Manage Terminals window <dialogs/manage-terminals>`.

   transient local server
      The :term:`local server` which is launched directly by :program:`qtermy` as a private child process using the ``--standalone`` argument to :doc:`termy-server <server>`. Unlike the :term:`persistent user server`, this server and all of its terminals will exit immediately when :program:`qtermy` exits. However, because the transient local server is run within the desktop session, all of the session's environment variables will be set within its terminals, allowing graphical applications and session management commands to be run from them.
